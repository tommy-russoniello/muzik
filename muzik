#!/usr/bin/env ruby

if ARGV.empty?
  puts('Available commands:')
  [
    'sync [external PATH]',
    'upload',
    'tag',
    'download',
    'stage',
    'init',
    'config [FIELD=VALUE...]',
    'refresh [cloud|local|external PATH]',
    'setup [cloud|local|external PATH]'
  ].each { |command| puts("  #{command}") }
  exit(true)
end

if ARGV.first == 'init'
  create_dir = lambda do |name|
    Dir.mkdir(name) unless Dir.exist?(name)
  end

  directory = File.expand_path('~/.muzik')
  create_dir.call(directory)
  create_dir.call("#{directory}/download")
  create_dir.call("#{directory}/upload")
  create_dir.call("#{directory}/trash")
  File.write("#{directory}/config.json", '{}') unless File.exists?("#{directory}/config.json")
  exit(true)
end

require 'colorize'

def boom(message)
  STDERR.puts("#{'Muzik Error:'.red} #{message}")
  exit(false)
end

location = File.expand_path('~/.muzik/config.json')
boom('No config file found. Run `muzik init` to initialize it.') unless File.exists?(location)

require 'json'

begin
  CONFIG = JSON.parse(File.read(location))
rescue StandardError
  boom('Error parsing config file.')
end

def instantiate(cloud: true, external: nil)
  require_relative './muzik'

  options = {
    cloud_url: (CONFIG['cloud_url'] if cloud),
    google_drive_config_location: CONFIG['google_drive_config_location'],
    log_location: CONFIG['log_location'],
    trash_path: CONFIG['trash_path']
  }
  if external
    options[:local_path] = external
  else
    options.merge!(
      apple_music: CONFIG['apple_music'],
      github_access_token: CONFIG['github_access_token'],
      github_repo: CONFIG['github_repo'],
      local_path: CONFIG['local_path'],
      upload_path: CONFIG['upload_path']
    )
  end

  Muzik.new(**options)
end

def get_external_path(value)
  boom('No external path provided') unless value

  path = File.expand_path(value.to_s)
  boom("Invalid external path: #{value}") unless File.exists?(path)

  path
end

begin
  case ARGV.first
  when 'sync'
    case ARGV[1]
    when nil
      instantiate.sync
    when 'external'
      instantiate(external: get_external_path(ARGV[2])).sync
    else
      boom("Unknown sync option: #{ARGV[1]}")
    end
  when 'upload'
    instantiate.upload
  when 'tag'
    system('open', CONFIG['download_path'], '-a', CONFIG['tagging_app'])
  when 'download'
    system(
      'youtube-dl',
      '-x',
      '--audio-format',
      'mp3',
      '-o',
      "#{CONFIG['download_path']}/%(title)s.%(ext)s",
      CONFIG['new_music_playlist_url']
    )
    puts('done'.green)
  when 'stage'
    path = "#{CONFIG['download_path']}/*.mp3"
    file_count = Dir[path].size
    Dir[path].each do |file_name|
      system('mv', file_name, "#{CONFIG['upload_path']}/#{File.basename(file_name)}")
    end

    puts("#{file_count} file#{file_count == 1 ? '' : 's'} staged for upload.".green)
  when 'config'
    begin
      args = ARGV[1..].map { |arg| arg.split('=', 2) }.to_h
    rescue ArgumentError
      boom('Invalid arguments')
    end

    valid_args = %w[
      apple_music
      cloud_url
      download_path
      github_access_token
      github_repo
      google_drive_config_location
      local_path
      new_music_playlist_url
      upload_path
      tagging_app
      trash_path
    ]
    args.each { |arg, _| boom("Unkown argument: #{arg}") unless valid_args.include?(arg) }
    args = CONFIG.merge(args)

    directory = File.expand_path('~/.muzik')
    args['upload_path'] ||= File.expand_path("#{directory}/upload")
    args['download_path'] ||= File.expand_path("#{directory}/download")
    args['trash_path'] ||= File.expand_path("#{directory}/trash")
    args['log_location'] ||= File.expand_path("#{directory}/log")
    args['google_drive_config_location'] ||= File.expand_path("#{directory}/google_drive.json")
    args['tagging_app'] ||= 'Mp3Tag'

    File.write("#{directory}/config.json", JSON.pretty_generate(args))
  when 'refresh'
    case ARGV[1]
    when 'cloud'
      instantiate.refresh_cloud
    when 'local'
      instantiate.refresh_local
    when 'external'
      instantiate(external: get_external_path(ARGV[2])).refresh_local
    else
      boom("Unknown refresh type: #{ARGV[1]}")
    end
  when 'setup'
    case ARGV[1]
    when 'cloud'
      instantiate.setup_cloud
    when 'local'
      instantiate(cloud: false).setup_local
    when 'external'
      instantiate(cloud: false, external: get_external_path(ARGV[2])).setup_local
    else
      boom("Unknown setup type: #{ARGV[1]}")
    end
  when 'auth'
    location = CONFIG['google_drive_config_location']
    require 'google_drive'
    begin
      GoogleDrive::Session.from_config(location)
      puts('Google Drive authentication is working properly.'.green)
    rescue Signet::AuthorizationError
      begin
        google_drive_config = JSON.parse(File.read(location))
      rescue StandardError
        boom('Error parsing Google Drive config file.')
      end

      google_drive_config = google_drive_config.slice('client_id', 'client_secret')
      File.write(location, JSON.pretty_generate(google_drive_config))
      GoogleDrive::Session.from_config(location)
      puts('Google Drive authentication updated successfully.'.green)
    end
  else
    boom("Unknown command: #{ARGV.first}")
  end
rescue Signet::AuthorizationError
  boom('Google Drive authentication failed. Run `muzik auth` to set new refresh token.')
end
